#!/bin/bash

function media_progress() {
    playerctl metadata &> /dev/null
    if [ $? -ne 0 ]; then return; fi
    if [ "$(playerctl --player playerctld status | grep 'Playing')" == 'Playing' ]; then
        echo ' '
        if [ $(expr $(date +'%S') % 2) -eq 0 ]; then
            progress=$(python -c "print($(playerctl metadata --format '{{position}}') / $(playerctl metadata --format '{{mpris:length}}') * 100)" | cut -d. -f1)
            if [ -z "$progress" ]; then
                echo '--%'
            else
                echo "$progress%"
            fi
        else
            progress=$(python -c "print($(playerctl metadata --format '{{position}}') / $(playerctl metadata --format '{{mpris:length}}') * 100)" | cut -d. -f1)
            if [ -z "$progress" ]; then
                echo '--:--'
            else
                python -c "from datetime import timedelta as td; data = $(playerctl metadata --format '{{mpris:length}}') - $(playerctl metadata --format '{{position}}'); print(td(microseconds=data))" | cut -d. -f1 | sed 's/^0://' | sed 's/^0//' | sed 's/^/-/'
            fi
        fi
    fi
}

function holiday() {
    today=$(date +'%m%d')
    if [ $today == '0301' ]; then
        echo '삼일절'
    elif [ $today == '0405' ]; then
        echo '식목일'
    elif [ $today == '0606' ]; then
        echo '현충일'
    elif [ $today == '0717' ]; then
        echo '제헌절'
    elif [ $today == '0815' ]; then
        echo '광복절'
    elif [ $today == '1003' ]; then
        echo '개천절'
    elif [ $today == '1009' ]; then
        echo '한글날'
    elif [ $today == '1225' ]; then
        echo '성탄절'
    fi
}

function output() {
    if [ $(cat /sys/class/leds/input*::capslock/brightness | head -n 1) -eq 1 ]; then
        echo '[ ⚠️ CAPS ] '
    fi
    if [ $(cat ~/.config/sway/config.d/startup_list.conf | grep '~/.config/sway/src/idle' | grep -cE '(MASKED|#)') -eq 1 -a $(systemctl is-enabled sleep.target | grep -c 'masked') -eq 1 ]; then
        echo '[ 👁 ] '
    elif [ $(cat ~/.config/sway/config.d/startup_list.conf | grep '~/.config/sway/src/idle' | grep -cE '(MASKED|#)') -eq 1 -a $(systemctl is-enabled sleep.target | grep -c 'masked') -eq 0 ]; then
        echo '[ 💤 ] '
    elif [ $(cat ~/.config/sway/config.d/startup_list.conf | grep '~/.config/sway/src/idle' | grep -cE '(MASKED|#)') -eq 0 -a $(systemctl is-enabled sleep.target | grep -c 'masked') -eq 1 ]; then
        echo '[ 🖵 ] '
    fi
    which docker &> /dev/null
    if [ $? -eq 0 ]; then
        count=$(docker ps | sed '1d' | wc -l)
        if [ $count -gt 0 ]; then
            echo "[ 🖧 $count ]"
        fi
    fi

    if [[ "$(systemctl is-active nordvpn)" == "active" || "$(pgrep -x spoofdpi)" != "" ]]; then
        echo ' [ 🌐'
        if [ "$(systemctl is-active nordvpn)" == "active" ]; then
            echo '🔒'
        fi
        if [[ "$(systemctl is-active nordvpn)" == "active" && "$(pgrep -x spoofdpi)" != "" ]]; then
            echo ' | '
        fi
        if ! [ x"$(pgrep -x spoofdpi)" == x ]; then
            echo '🗡'
        fi
        echo ' ]'
    fi

    echo ' ['
    if [ $(pactl list sinks | grep -c Dummy) -ge 1 ]; then
        echo ' ⚠️ Dummy '
    else
        if [ $(pactl list sinks short | wc -l) -gt 1 ]; then
            echo " $(~/.config/sway/src/change_sink 'current_source')"
        else
            if [ $(pactl list sinks | grep Active | grep -c headphones) -eq 1 ]; then
                echo ' 🎧 '
            fi
            if [ $(pactl get-default-sink | grep -c blue) -eq 1 ]; then
                echo ' ᚼ '
            fi
        fi
        if [ $(amixer get Master | grep 'Left' | grep '%' | awk '{ print $6 }' | tr -d \[ | tr -d \]) == 'on' ]; then
            echo ' 🔊 '
        else
            echo ' 🔈 '
        fi
        echo "$(amixer get Master | grep 'Left' | grep '%' | awk '{ print $5 }' | tr -d \[ | tr -d \])"
    fi

    playerctl metadata &> /dev/null
    if [ $? -eq 0 ]; then
        if [ "$(playerctl --player playerctld status | grep 'Playing')" == 'Playing' ]; then
            echo ' ▶︎ '
        elif [ "$(playerctl --player playerctld status | grep 'Paused')" == 'Paused' ]; then
            echo ' ⏸ '
        fi

        if [ $(playerctl -a status | grep Playing | wc -l) -gt 1 ]; then
            echo $(playerctl -a status | grep Playing | wc -l)
        elif [ -z "$(playerctl --player playerctld status | grep -v Stopped)" ]; then
            echo ''
        elif [ -z "$(playerctl --player playerctld metadata -f '{{xesam:url}}')" ]; then
            echo $(playerctl --player playerctld metadata -f '{{mpris:trackid}}' | sed "s/'//" | awk -F '/' '{ print $3 }')
            media_progress
        else
            if [ "$(playerctl --player playerctld metadata -f '{{xesam:url}}' | cut -d: -f1)" == 'file' ]; then
                echo $(playerctl --player playerctld metadata -f '{{xesam:url}}' | cut -d: -f1)
                media_progress
            else
                if [ $(playerctl --player playerctld metadata -f '{{xesam:url}}' | sed 's/.*:\/\///' | tr -cd '.' | wc -c) == 2 ]; then
                    echo $(playerctl --player playerctld metadata -f '{{xesam:url}}' | sed 's/.*:\/\///' | awk -F '.' '{ print $2 }')
                else
                    echo $(playerctl --player playerctld metadata -f '{{xesam:url}}' | sed 's/.*:\/\///' | awk -F '.' '{ print $1 }')
                fi
                media_progress
            fi
        fi
    fi
    echo ' ] [ 💻 '
    if [ $(expr $(date +'%S') % 2) -eq 0 ]; then
        echo $(sensors -u $1 | grep temp1_input | awk '{ print $2 }' | cut -d. -f1)°C
    else
        /usr/bin/top -bn1 | grep "Cpu(s)" | awk '{print int($2+$4)"%"}' # CPU 사용률
        # cat /proc/loadavg | awk '{ print $1 }' # LoA 수치
    fi
    which mbpfan &> /dev/null
    if [ $? -ne 0 ]; then
        if [ $(expr $(date +'%S') % 2) -eq 0 ]; then
            echo ' | 🖵 '
            echo $(sensors -u $2 | grep temp1_input | awk '{ print $2 }' | cut -d. -f1)°C
        else
            echo ' | 💾 '
            free | awk 'NR==2{m=$2;a=$7} NR==3{m+=$2;a+=$4} END{print int((m-a)/m*100)"%"}' # 사용률
            # free | awk 'NR==2{m=$2;a=$7} NR==3{m+=$2;a+=$4} END{print int(a/m*100)"%"}'   # 가용률
        fi
    else
        echo ' |  🪭 '
        if [ $(expr $(date +'%S') % 2) -eq 0 ]; then
            echo $(mbpfan get name | cut -c 1-3)
        else
            echo $(python -c "print ($(sensors -u $2 | grep fan1_input | awk '{ print $2 }') / $(sensors -u $2 | grep fan1_max | awk '{ print $2 }') * 100)" | cut -d. -f1)%;
        fi
    fi
    echo ' ] '
    if [ -r /sys/class/power_supply/BAT0/status ]; then
        if [ $(cat /sys/class/power_supply/BAT0/status) == 'Discharging' -a $(acpi -b | awk '{ print $4 }' | sed 's/%,//') -lt 100 ]; then
            if [ $(acpi -b | awk '{ print $4 }' | sed 's/%,//') -le 10 ]; then
                echo '[ 🛑 '
            elif [ $(acpi -b | awk '{ print $4 }' | sed 's/%,//') -le 20 ]; then
                echo '[ ⚠️ '
            else
                echo '[ '
            fi
            echo '🔋 '
            echo $(acpi -b | awk '{ print $4 }' | sed 's/%,//')%
            echo ' | '
            if [ $(expr $(date +'%S') % 2) -eq 0 ]; then
                echo $(sensors | grep TBXT | awk '{ print $2 }' | sed 's/+//' | cut -d. -f1)°C
            else
                acpi -b | awk '{ print $5 }' | head -c 5 | sed 's/^0//'
            fi
            echo ' ] '
        elif [ $(cat /sys/class/power_supply/BAT0/status) == 'Charging' -a $(acpi -b | awk '{ print $4 }' | sed 's/%,//') -lt 100 ]; then
            echo '[ 🗲 '
            echo $(acpi -b | awk '{ print $4 }' | sed 's/%,//')%
            echo ' | '
            if [ $(expr $(date +'%S') % 2) -eq 0 ]; then
                echo $(sensors | grep TBXT | awk '{ print $2 }' | sed 's/+//' | cut -d. -f1)°C
            else 
                acpi -b | awk '{ print $5 }' | head -c 5 | sed 's/^0//'
            fi
            echo ' ] '
        fi
    fi
    which brightnessctl &> /dev/null
    if [ $? -eq 0 ]; then
        echo '[ 🔆 '
        python -c "print($(brightnessctl get) / $(brightnessctl max) * 100)" | cut -d. -f1
        kbd_backlight=$(brightnessctl --device='smc::kbd_backlight' get 2> /dev/null)
        if [ -n "$kbd_backlight" ] && [ $kbd_backlight -gt 0 ]; then
            echo '% | '
            echo $(python -c "print ($(brightnessctl --device='smc::kbd_backlight' get) / $(brightnessctl --device='smc::kbd_backlight' max) * 100)" | cut -d. -f1)%
            echo ' ] '
        else
            echo '% ] '
        fi
    fi
    echo '[ '
    ~/.config/sway/src/weather
    echo ' ] [ '
    if [ $(expr $(date +'%S') % 2) -eq 0 ]; then
        /usr/bin/date +'%Y-%m-%d (%a) %R'
    else
        today=$(holiday)
        if ! [ x$today == x ]; then
            /usr/bin/date +"%q/4 %m%d ($(holiday)) %R"
        else
            /usr/bin/date +'%q/4 %d %b (%a) %R'
        fi
    fi
    echo ' ]'
}

########    DO NOT CHANGE OR REMOVE BELOW LINES    ########
#   This script will not work after changing below code   #
###########################################################
if [ $# -eq 2 ]; then
    output $@ | tr -d '\n'
else
    echo -e "[ $(swaybar --version) ] [ $0 ] [ An error occurred while loading swaybar ] [ params: $# / 2 <sensors for CPU & sensors for (GPU|FAN)> ] [ $(date) ]"
fi
###########################################################

